From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: devoirr <138160506+devoirr@users.noreply.github.com>
Date: Thu, 25 Apr 2024 10:52:21 +0300
Subject: [PATCH] Removed deprecated API from Player class


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 4a875bce9563f3b9351ebecde9b0eb1287beb50e..eefa973d599ecb234083832ae0669b32e95de65a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -34,6 +34,7 @@ import org.bukkit.entity.Player;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.profile.PlayerProfile;
+import org.jetbrains.annotations.NotNull;
 
 @SerializableAs("Player")
 public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializable {
@@ -408,7 +409,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void incrementStatistic(Statistic statistic) {
+    public void incrementStatistic(@NotNull Statistic statistic) {
         if (this.isOnline()) {
             this.getPlayer().incrementStatistic(statistic);
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9dd9e86a5f7f30ce37b906ebfe4bccad0e52577f..49f4b39b6f40620c23e0ee330a7f8a404def5b92 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -255,6 +255,7 @@ import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
@@ -2386,7 +2387,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public void sendPluginMessage(Plugin source, String channel, byte[] message) {
+    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, byte[] message) {
         StandardMessenger.validatePluginMessage(this.getMessenger(), source, channel, message);
 
         for (Player player : this.getOnlinePlayers()) {
@@ -2395,7 +2396,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Set<String> getListeningPluginChannels() {
+    public @NotNull Set<String> getListeningPluginChannels() {
         Set<String> result = new HashSet<String>();
 
         for (Player player : this.getOnlinePlayers()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index becb3b07876715d7c39ba4e7289cc5ac85f84412..0903c7dc4f43e8f6609b854acb8eea8912727761 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -1660,7 +1660,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void sendPluginMessage(Plugin source, String channel, byte[] message) {
+    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, byte[] message) {
         StandardMessenger.validatePluginMessage(this.server.getMessenger(), source, channel, message);
 
         for (Player player : this.getPlayers()) {
@@ -1669,7 +1669,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Set<String> getListeningPluginChannels() {
+    public @NotNull Set<String> getListeningPluginChannels() {
         Set<String> result = new HashSet<String>();
 
         for (Player player : this.getPlayers()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
index 4e56018b64d11f76c8da43fd8f85c6de72204e36..ebbeeee8e95c79f0821ef5b9b97c4da597de4894 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
@@ -7,6 +7,7 @@ import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
 import org.bukkit.craftbukkit.conversations.ConversationTracker;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents CLI input from a console
@@ -64,22 +65,22 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
     }
 
     @Override
-    public boolean beginConversation(Conversation conversation) {
+    public boolean beginConversation(@NotNull Conversation conversation) {
         return this.conversationTracker.beginConversation(conversation);
     }
 
     @Override
-    public void abandonConversation(Conversation conversation) {
+    public void abandonConversation(@NotNull Conversation conversation) {
         this.conversationTracker.abandonConversation(conversation, new ConversationAbandonedEvent(conversation, new ManuallyAbandonedConversationCanceller()));
     }
 
     @Override
-    public void abandonConversation(Conversation conversation, ConversationAbandonedEvent details) {
+    public void abandonConversation(@NotNull Conversation conversation, @NotNull ConversationAbandonedEvent details) {
         this.conversationTracker.abandonConversation(conversation, details);
     }
 
     @Override
-    public void acceptConversationInput(String input) {
+    public void acceptConversationInput(@NotNull String input) {
         this.conversationTracker.acceptConversationInput(input);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index ec4fea7e94f09e254c0d68d45ee96e60154f9eb1..32b29567b6e2c2c4a7fca8945cbd4160a9b37817 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -49,7 +49,6 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftItemType;
 import org.bukkit.craftbukkit.inventory.CraftMerchantCustom;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.Firework;
@@ -104,16 +103,6 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         return this.getHandle().getMainArm() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT;
     }
 
-    @Override
-    public ItemStack getItemInHand() {
-        return this.getInventory().getItemInHand();
-    }
-
-    @Override
-    public void setItemInHand(ItemStack item) {
-        this.getInventory().setItemInHand(item);
-    }
-
     @Override
     public @NotNull ItemStack getItemOnCursor() {
         return CraftItemStack.asCraftMirror(this.getHandle().containerMenu.getCarried());
@@ -626,7 +615,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public boolean hasCooldown(Material material) {
+    public boolean hasCooldown(@NotNull Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
@@ -634,7 +623,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public int getCooldown(Material material) {
+    public int getCooldown(@NotNull Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index e70197f9d71e1c6b503089ef3e73681bb1006230..e128869dc4cdc0457399384f2089c5eddcb34504 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.entity;
 
-import com.destroystokyo.paper.entity.TargetEntityInfo;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Sets;
 import java.util.ArrayList;
@@ -21,7 +20,6 @@ import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
 import net.minecraft.world.entity.decoration.ArmorStand;
-import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.entity.projectile.FishingHook;
 import net.minecraft.world.entity.projectile.LargeFireball;
@@ -57,7 +55,6 @@ import org.bukkit.entity.Fireball;
 import org.bukkit.entity.Firework;
 import org.bukkit.entity.FishHook;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.entity.LingeringPotion;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.LlamaSpit;
 import org.bukkit.entity.Player;
@@ -204,41 +201,17 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     // Paper start
-    @Override
-    public Block getTargetBlock(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode) {
-        return this.getTargetBlockExact(maxDistance, fluidMode.bukkit);
-    }
-
-    @Override
-    public org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode) {
-        return this.getTargetBlockFace(maxDistance, fluidMode.bukkit);
-    }
 
     @Override
     public org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance, org.bukkit.FluidCollisionMode fluidMode) {
         RayTraceResult result = this.rayTraceBlocks(maxDistance, fluidMode);
         return result != null ? result.getHitBlockFace() : null;
     }
-
-    @Override
-    public com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode) {
-        RayTraceResult result = this.rayTraceBlocks(maxDistance, fluidMode.bukkit);
-        if (result != null && result.getHitBlock() != null && result.getHitBlockFace() != null) {
-            return new com.destroystokyo.paper.block.TargetBlockInfo(result.getHitBlock(), result.getHitBlockFace());
-        }
-        return null;
-    }
-
     public Entity getTargetEntity(int maxDistance, boolean ignoreBlocks) {
         net.minecraft.world.phys.EntityHitResult rayTrace = rayTraceEntity(maxDistance, ignoreBlocks);
         return rayTrace == null ? null : rayTrace.getEntity().getBukkitEntity();
     }
 
-    public TargetEntityInfo getTargetEntityInfo(int maxDistance, boolean ignoreBlocks) {
-        net.minecraft.world.phys.EntityHitResult rayTrace = rayTraceEntity(maxDistance, ignoreBlocks);
-        return rayTrace == null ? null : new TargetEntityInfo(rayTrace.getEntity().getBukkitEntity(), new org.bukkit.util.Vector(rayTrace.getLocation().x, rayTrace.getLocation().y, rayTrace.getLocation().z));
-    }
-
     @Override
     public RayTraceResult rayTraceEntities(int maxDistance, boolean ignoreBlocks) {
         net.minecraft.world.phys.EntityHitResult rayTrace = this.rayTraceEntity(maxDistance, ignoreBlocks);
@@ -313,22 +286,6 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         this.getHandle().maxAirTicks = ticks;
     }
 
-    @Override
-    public ItemStack getItemInUse() {
-        net.minecraft.world.item.ItemStack item = this.getHandle().getUseItem();
-        return item.isEmpty() ? null : CraftItemStack.asCraftMirror(item);
-    }
-
-    @Override
-    public int getItemInUseTicks() {
-        return this.getHandle().getUseItemRemainingTicks();
-    }
-
-    @Override
-    public void setItemInUseTicks(int ticks) {
-        this.getHandle().useItemRemaining = ticks;
-    }
-
     @Override
     public int getArrowCooldown() {
         return this.getHandle().removeArrowTime;
@@ -520,19 +477,14 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     // Paper end
 
     @Override
-    public boolean addPotionEffect(PotionEffect effect) {
-        return this.addPotionEffect(effect, false);
-    }
-
-    @Override
-    public boolean addPotionEffect(PotionEffect effect, boolean force) {
+    public boolean addPotionEffect(@NotNull PotionEffect effect) {
         org.spigotmc.AsyncCatcher.catchOp("effect add"); // Paper
         this.getHandle().addEffect(org.bukkit.craftbukkit.potion.CraftPotionUtil.fromBukkit(effect), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
         return true;
     }
 
     @Override
-    public boolean addPotionEffects(Collection<PotionEffect> effects) {
+    public boolean addPotionEffects(@NotNull Collection<PotionEffect> effects) {
         boolean success = true;
         for (PotionEffect effect : effects) {
             success &= this.addPotionEffect(effect);
@@ -541,7 +493,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public boolean hasPotionEffect(PotionEffectType type) {
+    public boolean hasPotionEffect(@NotNull PotionEffectType type) {
         return this.getHandle().hasEffect(CraftPotionEffectType.bukkitToMinecraft(type));
     }
 
@@ -614,13 +566,8 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
             }
             ((net.minecraft.world.entity.projectile.AbstractArrow) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), 0.0F, 3.0F, 1.0F); // ItemBow
         } else if (ThrownPotion.class.isAssignableFrom(projectile)) {
-            if (LingeringPotion.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, this.getHandle());
-                ((net.minecraft.world.entity.projectile.ThrownPotion) launch).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.LINGERING_POTION, 1)));
-            } else {
-                launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, this.getHandle());
-                ((net.minecraft.world.entity.projectile.ThrownPotion) launch).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.SPLASH_POTION, 1)));
-            }
+            launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, this.getHandle());
+            ((net.minecraft.world.entity.projectile.ThrownPotion) launch).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.SPLASH_POTION, 1)));
             ((ThrowableProjectile) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), -20.0F, 0.5F, 1.0F); // ItemSplashPotion
         } else if (ThrownExpBottle.class.isAssignableFrom(projectile)) {
             launch = new ThrownExperienceBottle(world, this.getHandle());
@@ -645,7 +592,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
                 launch = new LargeFireball(world, this.getHandle(), direction.getX(), direction.getY(), direction.getZ(), 1);
             }
 
-            ((AbstractHurtingProjectile) launch).projectileSource = this;
+            launch.projectileSource = this;
             launch.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         } else if (LlamaSpit.class.isAssignableFrom(projectile)) {
             Location location = this.getEyeLocation();
@@ -802,16 +749,6 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         this.getHandle().setSharedFlag(7, gliding);
     }
 
-    @Override
-    public boolean isSwimming() {
-        return this.getHandle().isSwimming();
-    }
-
-    @Override
-    public void setSwimming(boolean swimming) {
-        this.getHandle().setSwimming(swimming);
-    }
-
     @Override
     public boolean isRiptiding() {
         return this.getHandle().isAutoSpinAttack();
@@ -1008,16 +945,6 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     // Paper end
 
     // Paper start
-    @Override
-    public int getArrowsStuck() {
-        return this.getHandle().getArrowCount();
-    }
-
-    @Override
-    public void setArrowsStuck(final int arrows) {
-        this.getHandle().setArrowCount(arrows);
-    }
-
     @Override
     public int getShieldBlockingDelay() {
         return getHandle().getShieldBlockingDelay();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index cddde8a638ec43e453ee7df8b28e9f91d3f7e9b8..afbe7d43faae63056b85258d0e8133ddb7cadf33 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -161,7 +161,6 @@ import org.bukkit.event.player.PlayerExpCooldownChangeEvent;
 import org.bukkit.event.player.PlayerHideEntityEvent;
 import org.bukkit.event.player.PlayerRegisterChannelEvent;
 import org.bukkit.event.player.PlayerShowEntityEvent;
-import org.bukkit.event.player.PlayerSpawnChangeEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerUnregisterChannelEvent;
 import org.bukkit.inventory.EquipmentSlot;
@@ -286,7 +285,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendRawMessage(String message) {
+    public void sendRawMessage(@NotNull String message) {
         this.sendRawMessage(null, message);
     }
 
@@ -341,7 +340,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     @Deprecated
-    public void sendActionBar(String message) {
+    public void sendActionBar(@NotNull String message) {
         if (getHandle().connection == null || message == null || message.isEmpty()) return;
         getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket(CraftChatMessage.fromStringOrNull(message)));
     }
@@ -447,7 +446,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper end
 
     @Override
-    public String getDisplayName() {
+    public @NotNull String getDisplayName() {
         if(true) return io.papermc.paper.adventure.DisplayNames.getLegacy(this); // Paper
         return this.getHandle().displayName;
     }
@@ -469,7 +468,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
     @Override
-    public net.kyori.adventure.text.Component playerListName() {
+    public net.kyori.adventure.text.@NotNull Component playerListName() {
         return getHandle().listName == null ? net.kyori.adventure.text.Component.text(getName()) : io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().listName);
     }
     @Override
@@ -482,7 +481,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
     @Override
-    public String getPlayerListName() {
+    public @NotNull String getPlayerListName() {
         return this.getHandle().listName == null ? this.getName() : CraftChatMessage.fromComponent(this.getHandle().listName);
     }
 
@@ -579,7 +578,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void kick(net.kyori.adventure.text.Component message, org.bukkit.event.player.PlayerKickEvent.Cause cause) {
+    public void kick(net.kyori.adventure.text.Component message, org.bukkit.event.player.PlayerKickEvent.@NotNull Cause cause) {
         //org.spigotmc.AsyncCatcher.catchOp("player kick"); // Folia - region threading - no longer needed
         final ServerGamePacketListenerImpl connection = this.getHandle().connection;
         if (connection != null) {
@@ -588,7 +587,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public <T> T getClientOption(com.destroystokyo.paper.ClientOption<T> type) {
+    public <T> @NotNull T getClientOption(com.destroystokyo.paper.@NotNull ClientOption<T> type) {
         if (com.destroystokyo.paper.ClientOption.SKIN_PARTS == type) {
             return type.getType().cast(new com.destroystokyo.paper.PaperSkinParts(getHandle().getEntityData().get(net.minecraft.world.entity.player.Player.DATA_PLAYER_MODE_CUSTOMISATION)));
         } else if (com.destroystokyo.paper.ClientOption.CHAT_COLORS_ENABLED == type) {
@@ -638,7 +637,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper end - custom chat completions API
 
     @Override
-    public void setCompassTarget(Location loc) {
+    public void setCompassTarget(@NotNull Location loc) {
         Preconditions.checkArgument(loc != null, "Location cannot be null");
 
         if (this.getHandle().connection == null) return;
@@ -648,7 +647,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public Location getCompassTarget() {
+    public @NotNull Location getCompassTarget() {
         return this.getHandle().compassTarget;
     }
 
@@ -675,18 +674,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public boolean performCommand(String command) {
+    public boolean performCommand(@NotNull String command) {
         Preconditions.checkArgument(command != null, "command cannot be null");
         return this.server.dispatchCommand(this, command);
     }
 
     @Override
-    public void playNote(Location loc, byte instrument, byte note) {
+    public void playNote(@NotNull Location loc, byte instrument, byte note) {
         this.playNote(loc, Instrument.getByType(instrument), new Note(note));
     }
 
     @Override
-    public void playNote(Location loc, Instrument instrument, Note note) {
+    public void playNote(@NotNull Location loc, @NotNull Instrument instrument, @NotNull Note note) {
         Preconditions.checkArgument(loc != null, "Location cannot be null");
         Preconditions.checkArgument(instrument != null, "Instrument cannot be null");
         Preconditions.checkArgument(note != null, "Note cannot be null");
@@ -704,22 +703,22 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playSound(Location loc, Sound sound, float volume, float pitch) {
+    public void playSound(@NotNull Location loc, @NotNull Sound sound, float volume, float pitch) {
         this.playSound(loc, sound, org.bukkit.SoundCategory.MASTER, volume, pitch);
     }
 
     @Override
-    public void playSound(Location loc, String sound, float volume, float pitch) {
+    public void playSound(@NotNull Location loc, @NotNull String sound, float volume, float pitch) {
         this.playSound(loc, sound, org.bukkit.SoundCategory.MASTER, volume, pitch);
     }
 
     @Override
-    public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(@NotNull Location loc, @NotNull Sound sound, org.bukkit.@NotNull SoundCategory category, float volume, float pitch) {
         this.playSound(loc, sound, category, volume, pitch, this.getHandle().random.nextLong());
     }
 
     @Override
-    public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(@NotNull Location loc, @NotNull String sound, org.bukkit.@NotNull SoundCategory category, float volume, float pitch) {
         this.playSound(loc, sound, category, volume, pitch, this.getHandle().random.nextLong());
     }
 
@@ -994,12 +993,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
     @Override
-    public void sendSignChange(Location loc, String[] lines) {
+    public void sendSignChange(@NotNull Location loc, String[] lines) {
         this.sendSignChange(loc, lines, DyeColor.BLACK);
     }
 
     @Override
-    public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor) {
+    public void sendSignChange(@NotNull Location loc, String[] lines, DyeColor dyeColor) {
         this.sendSignChange(loc, lines, dyeColor, false);
     }
 
@@ -1051,7 +1050,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendEquipmentChange(LivingEntity entity, Map<EquipmentSlot, ItemStack> items) {
+    public void sendEquipmentChange(@NotNull LivingEntity entity, @NotNull Map<EquipmentSlot, ItemStack> items) {
         Preconditions.checkArgument(entity != null, "Entity cannot be null");
         Preconditions.checkArgument(items != null, "items cannot be null");
 
@@ -1071,7 +1070,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendPotionEffectChange(LivingEntity entity, PotionEffect effect) {
+    public void sendPotionEffectChange(@NotNull LivingEntity entity, @NotNull PotionEffect effect) {
         Preconditions.checkArgument(entity != null, "Entity cannot be null");
         Preconditions.checkArgument(effect != null, "Effect cannot be null");
 
@@ -1083,7 +1082,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendPotionEffectChangeRemove(LivingEntity entity, PotionEffectType type) {
+    public void sendPotionEffectChangeRemove(@NotNull LivingEntity entity, @NotNull PotionEffectType type) {
         Preconditions.checkArgument(entity != null, "Entity cannot be null");
         Preconditions.checkArgument(type != null, "Type cannot be null");
 
@@ -1171,7 +1170,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendMap(MapView map) {
+    public void sendMap(@NotNull MapView map) {
         if (this.getHandle().connection == null) return;
 
         RenderData data = ((CraftMapView) map).render(this);
@@ -1201,7 +1200,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void addCustomChatCompletions(Collection<String> completions) {
+    public void addCustomChatCompletions(@NotNull Collection<String> completions) {
         this.sendCustomChatCompletionPacket(completions, ClientboundCustomChatCompletionsPacket.Action.ADD);
     }
 
@@ -1522,7 +1521,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void incrementStatistic(Statistic statistic) {
+    public void incrementStatistic(@NotNull Statistic statistic) {
         CraftStatistic.incrementStatistic(this.getHandle().getStats(), statistic, this.getHandle());
     }
 
@@ -1903,12 +1902,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void hidePlayer(Plugin plugin, Player player) {
+    public void hidePlayer(@NotNull Plugin plugin, @NotNull Player player) {
         this.hideEntity(plugin, player);
     }
 
     @Override
-    public void hideEntity(Plugin plugin, org.bukkit.entity.Entity entity) {
+    public void hideEntity(@NotNull Plugin plugin, org.bukkit.entity.@NotNull Entity entity) {
         Preconditions.checkArgument(plugin != null, "Plugin cannot be null");
         Preconditions.checkArgument(plugin.isEnabled(), "Plugin (%s) cannot be disabled", plugin.getName());
 
@@ -1990,12 +1989,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void showPlayer(Plugin plugin, Player player) {
+    public void showPlayer(@NotNull Plugin plugin, @NotNull Player player) {
         this.showEntity(plugin, player);
     }
 
     @Override
-    public void showEntity(Plugin plugin, org.bukkit.entity.Entity entity) {
+    public void showEntity(@NotNull Plugin plugin, org.bukkit.entity.@NotNull Entity entity) {
         Preconditions.checkArgument(plugin != null, "Plugin cannot be null");
         // Don't require that plugin be enabled. A plugin must be allowed to call
         // showPlayer during its onDisable() method.
@@ -2140,12 +2139,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public boolean canSee(Player player) {
+    public boolean canSee(@NotNull Player player) {
         return this.canSee((org.bukkit.entity.Entity) player);
     }
 
     @Override
-    public boolean canSee(org.bukkit.entity.Entity entity) {
+    public boolean canSee(org.bukkit.entity.@NotNull Entity entity) {
         return this.equals(entity) || entity.isVisibleByDefault() ^ this.invertedVisibilityEntities.containsKey(entity.getUniqueId()); // SPIGOT-7312: Can always see self
     }
 
@@ -2160,7 +2159,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     // Paper start - Add Listing API for Player
     @Override
-    public boolean isListed(Player other) {
+    public boolean isListed(@NotNull Player other) {
         return !this.unlistedEntities.contains(other.getUniqueId());
     }
 
@@ -2318,22 +2317,22 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public boolean beginConversation(Conversation conversation) {
+    public boolean beginConversation(@NotNull Conversation conversation) {
         return this.conversationTracker.beginConversation(conversation);
     }
 
     @Override
-    public void abandonConversation(Conversation conversation) {
+    public void abandonConversation(@NotNull Conversation conversation) {
         this.conversationTracker.abandonConversation(conversation, new ConversationAbandonedEvent(conversation, new ManuallyAbandonedConversationCanceller()));
     }
 
     @Override
-    public void abandonConversation(Conversation conversation, ConversationAbandonedEvent details) {
+    public void abandonConversation(@NotNull Conversation conversation, @NotNull ConversationAbandonedEvent details) {
         this.conversationTracker.abandonConversation(conversation, details);
     }
 
     @Override
-    public void acceptConversationInput(String input) {
+    public void acceptConversationInput(@NotNull String input) {
         this.conversationTracker.acceptConversationInput(input);
     }
 
@@ -2343,7 +2342,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendPluginMessage(Plugin source, String channel, byte[] message) {
+    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, byte[] message) {
         StandardMessenger.validatePluginMessage(this.server.getMessenger(), source, channel, message);
         if (this.getHandle().connection == null) return;
 
@@ -2525,7 +2524,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public Set<String> getListeningPluginChannels() {
+    public @NotNull Set<String> getListeningPluginChannels() {
         return ImmutableSet.copyOf(this.channels);
     }
 
@@ -2843,12 +2842,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void spawnParticle(Particle particle, Location location, int count) {
+    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count);
     }
 
     @Override
-    public void spawnParticle(Particle particle, double x, double y, double z, int count) {
+    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count) {
         this.spawnParticle(particle, x, y, z, count, null);
     }
 
@@ -2997,7 +2996,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component displayName() {
+    public net.kyori.adventure.text.@NotNull Component displayName() {
         return this.getHandle().adventure$displayName;
     }
 
@@ -3261,7 +3260,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     {
 
         @Override
-        public InetSocketAddress getRawAddress()
+        public @NotNull InetSocketAddress getRawAddress()
         {
             return (InetSocketAddress) CraftPlayer.this.getHandle().connection.getRawAddress();
         }
@@ -3276,7 +3275,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         @Override
-        public Set<Player> getHiddenPlayers()
+        public @NotNull Set<Player> getHiddenPlayers()
         {
             Set<Player> ret = new HashSet<>();
             for ( Player p : CraftPlayer.this.getServer().getOnlinePlayers() )
